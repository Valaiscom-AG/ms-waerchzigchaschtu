<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        :root {
            --primary-color: #d60136;
            --secondary-color: #808080;
            --tertiary-color: #000000;
        }

        .graph-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
        }

        .graph-logo {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 50px;
            height: auto;
        }

        .graph-icon {
            width: 24px;
            height: 24px;
            margin-right: 5px;
        }

        .tab-content {
            padding-top: 20px;
        }

        #dataInput {
            font-family: monospace;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary rounded-3">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img class="img-fluid mb-2" src="/assets/logo/logo.png" alt="valaiscom" width="125">
                <span class="m-3">{{title}}</span>
            </a>
            <button id="themeSwitcher" class="btn ms-2">
                <i id="themeIcon" class="bi bi-moon"></i>
            </button>
        </div>
    </nav>

    <div class="container mt-5"></div>
    <h1 class="fw-bold mb-3">Graph Creator</h1>
    <div id="graphList" class="row"></div>
    <button id="addGraph" class="btn btn-primary mt-3">
        <i class="bi bi-plus-circle"></i> Add New Graph
    </button>
    </div>

    <div class="modal fade" id="graphModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create/Edit Graph</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="graphForm">
                        <div class="mb-3">
                            <label for="graphTitle" class="form-label">Graph Title</label>
                            <input type="text" class="form-control" id="graphTitle" required>
                        </div>
                        <ul class="nav nav-tabs" id="graphTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="type-tab" data-bs-toggle="tab"
                                    data-bs-target="#type" type="button" role="tab" aria-controls="type"
                                    aria-selected="true">
                                    <i class="bi bi-bar-chart"></i> Type
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="data-tab" data-bs-toggle="tab" data-bs-target="#data"
                                    type="button" role="tab" aria-controls="data" aria-selected="false">
                                    <i class="bi bi-table"></i> Data
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload"
                                    type="button" role="tab" aria-controls="upload" aria-selected="false">
                                    <i class="bi bi-upload"></i> Upload
                                </button>
                            </li>
                        </ul>
                        <div class="tab-content" id="graphTabContent">
                            <div class="tab-pane fade show active" id="type" role="tabpanel" aria-labelledby="type-tab">
                                <div class="mb-3">
                                    <label class="form-label">Graph Type</label>
                                    <div class="btn-group" role="group" aria-label="Graph type">
                                        <input type="radio" class="btn-check" name="graphType" id="typeBar" value="bar"
                                            autocomplete="off" checked>
                                        <label class="btn btn-outline-primary" for="typeBar">
                                            <svg class="graph-icon" viewBox="0 0 24 24">
                                                <rect x="3" y="3" width="4" height="18" />
                                                <rect x="10" y="8" width="4" height="13" />
                                                <rect x="17" y="5" width="4" height="16" />
                                            </svg>
                                            Bar
                                        </label>
                                        <input type="radio" class="btn-check" name="graphType" id="typeLine"
                                            value="line" autocomplete="off">
                                        <label class="btn btn-outline-primary" for="typeLine">
                                            <svg class="graph-icon" viewBox="0 0 24 24">
                                                <path d="M3 3v18h18" fill="none" stroke="currentColor"
                                                    stroke-width="2" />
                                                <path d="M3 15l4-4 8 4 4-6" fill="none" stroke="currentColor"
                                                    stroke-width="2" />
                                            </svg>
                                            Line
                                        </label>
                                        <input type="radio" class="btn-check" name="graphType" id="typePie" value="pie"
                                            autocomplete="off">
                                        <label class="btn btn-outline-primary" for="typePie">
                                            <svg class="graph-icon" viewBox="0 0 24 24">
                                                <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor"
                                                    stroke-width="2" />
                                                <path d="M12 2 L12 12 L20 16" fill="none" stroke="currentColor"
                                                    stroke-width="2" />
                                            </svg>
                                            Pie
                                        </label>
                                        <input type="radio" class="btn-check" name="graphType" id="typeCombo"
                                            value="combo" autocomplete="off">
                                        <label class="btn btn-outline-primary" for="typeCombo">
                                            <svg class="graph-icon" viewBox="0 0 24 24">
                                                <rect x="3" y="10" width="4" height="11" />
                                                <rect x="10" y="3" width="4" height="18" />
                                                <rect x="17" y="7" width="4" height="14" />
                                                <path d="M3 15l4-4 8 4 4-6" fill="none" stroke="currentColor"
                                                    stroke-width="2" />
                                            </svg>
                                            Combo
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="data" role="tabpanel" aria-labelledby="data-tab">
                                <div class="mb-3">
                                    <label for="dataInput" class="form-label">Graph Data (Simplified Excel
                                        format)</label>
                                    <textarea class="form-control" id="dataInput" rows="10" required></textarea>
                                    <small class="form-text text-muted">
                                        Enter data in a simplified Excel format. Use tabs to separate columns and
                                        newlines for rows.
                                        For combo graphs, use "type:value" in cells to specify different types (e.g.,
                                        "bar:10" or "line:15").
                                    </small>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="upload" role="tabpanel" aria-labelledby="upload-tab">
                                <div class="mb-3">
                                    <label for="fileUpload" class="form-label">Upload CSV File</label>
                                    <input type="file" class="form-control" id="fileUpload" accept=".csv">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveGraph">Save Graph</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Graph Creator JavaScript

        let graphs = JSON.parse(localStorage.getItem('graphs')) || [];
        let currentGraphIndex = -1;

        // DOM Elements
        const graphList = document.getElementById('graphList');
        const addGraphBtn = document.getElementById('addGraph');
        const graphModal = new bootstrap.Modal(document.getElementById('graphModal'));
        const graphForm = document.getElementById('graphForm');
        const saveGraphBtn = document.getElementById('saveGraph');
        const fileUpload = document.getElementById('fileUpload');
        const dataInput = document.getElementById('dataInput');
        const graphTitle = document.getElementById('graphTitle');

        function renderGraphs() {
            graphList.innerHTML = '';
            graphs.forEach((graph, index) => {
                const col = createGraphCard(graph, index);
                graphList.appendChild(col);
                createChart(`graph-${index}`, graph.type, graph.data);
            });
        }

        function createGraphCard(graph, index) {
            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-4';
            col.innerHTML = `
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">${graph.title}</h5>
                <div class="graph-container">
                    <canvas id="graph-${index}"></canvas>
                    <img src="/api/placeholder/50/50" alt="Logo" class="graph-logo">
                </div>
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-primary edit-graph" data-index="${index}">
                        <i class="bi bi-pencil"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-secondary duplicate-graph" data-index="${index}">
                        <i class="bi bi-files"></i> Duplicate
                    </button>
                    <button class="btn btn-sm btn-danger delete-graph" data-index="${index}">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
                <div class="btn-group mt-2" role="group">
                    <button class="btn btn-sm btn-info export-png" data-index="${index}">
                        <i class="bi bi-file-earmark-image"></i> PNG
                    </button>
                    <button class="btn btn-sm btn-info export-pdf" data-index="${index}">
                        <i class="bi bi-file-earmark-pdf"></i> PDF
                    </button>
                    <button class="btn btn-sm btn-info export-excel" data-index="${index}">
                        <i class="bi bi-file-earmark-spreadsheet"></i> Excel
                    </button>
                </div>
            </div>
        </div>
    `;
            return col;
        }

        function createChart(canvasId, type, data) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            const chartData = parseChartData(data, type);
            new Chart(ctx, {
                type: type === 'combo' ? 'bar' : type,
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        title: { display: true, text: 'Custom Graph' }
                    }
                }
            });
        }

        function parseChartData(data, type) {
            const lines = data.trim().split('\n');
            const headers = lines[0].split('\t');
            const datasets = headers.slice(1).map((label, index) => ({
                label,
                data: [],
                backgroundColor: getColor(index),
                borderColor: getColor(index),
                type: type === 'combo' ? (label.toLowerCase().includes('line') ? 'line' : 'bar') : type
            }));

            const labels = [];
            for (let i = 1; i < lines.length; i++) {
                const values = lines[i].split('\t');
                labels.push(values[0]);
                for (let j = 1; j < values.length; j++) {
                    let value = values[j];
                    if (type === 'combo' && value.includes(':')) {
                        const [dataType, dataValue] = value.split(':');
                        datasets[j - 1].type = dataType;
                        value = parseFloat(dataValue);
                    } else {
                        value = parseFloat(value);
                    }
                    datasets[j - 1].data.push(value);
                }
            }

            return { labels, datasets };
        }

        function getColor(index) {
            const colors = [
                'rgba(255, 99, 132, 0.8)',
                'rgba(54, 162, 235, 0.8)',
                'rgba(255, 206, 86, 0.8)',
                'rgba(75, 192, 192, 0.8)',
                'rgba(153, 102, 255, 0.8)',
                'rgba(255, 159, 64, 0.8)'
            ];
            return colors[index % colors.length];
        }

        function addGraph() {
            currentGraphIndex = -1;
            graphForm.reset();
            dataInput.value = 'Category\tValue1\tValue2\nA\t10\t20\nB\t15\t25\nC\t20\t15';
            graphModal.show();
        }

        function saveGraph() {
            const title = graphTitle.value;
            const type = document.querySelector('input[name="graphType"]:checked').value;
            const data = dataInput.value;

            if (currentGraphIndex === -1) {
                graphs.push({ title, type, data });
            } else {
                graphs[currentGraphIndex] = { title, type, data };
            }

            localStorage.setItem('graphs', JSON.stringify(graphs));
            graphModal.hide();
            renderGraphs();
        }

        function editGraph(index) {
            currentGraphIndex = index;
            const graph = graphs[index];
            graphTitle.value = graph.title;
            document.querySelector(`input[name="graphType"][value="${graph.type}"]`).checked = true;
            dataInput.value = graph.data;
            graphModal.show();
        }

        function duplicateGraph(index) {
            const graph = { ...graphs[index] };
            graph.title += ' (Copy)';
            graphs.push(graph);
            localStorage.setItem('graphs', JSON.stringify(graphs));
            renderGraphs();
        }

        function deleteGraph(index) {
            if (confirm('Are you sure you want to delete this graph?')) {
                graphs.splice(index, 1);
                localStorage.setItem('graphs', JSON.stringify(graphs));
                renderGraphs();
            }
        }

        function exportToPNG(index) {
            const canvas = document.getElementById(`graph-${index}`);
            const link = document.createElement('a');
            link.download = `graph-${index}.png`;
            link.href = canvas.toDataURL();
            link.click();
        }

        function exportToPDF(index) {
            const canvas = document.getElementById(`graph-${index}`);
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jspdf.jsPDF();
            pdf.addImage(imgData, 'PNG', 10, 10);
            pdf.save(`graph-${index}.pdf`);
        }

        function exportToExcel(index) {
            const graph = graphs[index];
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet(graph.data.split('\n').map(row => row.split('\t')));
            XLSX.utils.book_append_sheet(wb, ws, 'Graph Data');
            XLSX.writeFile(wb, `graph-${index}.xlsx`);
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                dataInput.value = e.target.result;
            };
            reader.readAsText(file);
        }

        // Event Listeners
        addGraphBtn.addEventListener('click', addGraph);
        saveGraphBtn.addEventListener('click', saveGraph);
        fileUpload.addEventListener('change', handleFileUpload);

        graphList.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;

            const index = parseInt(target.dataset.index);
            if (target.classList.contains('edit-graph')) editGraph(index);
            if (target.classList.contains('duplicate-graph')) duplicateGraph(index);
            if (target.classList.contains('delete-graph')) deleteGraph(index);
            if (target.classList.contains('export-png')) exportToPNG(index);
            if (target.classList.contains('export-pdf')) exportToPDF(index);
            if (target.classList.contains('export-excel')) exportToExcel(index);
        });

        // Theme switcher
        const themeSwitcher = document.getElementById('themeSwitcher');
        const themeIcon = document.getElementById('themeIcon');

        themeSwitcher.addEventListener('click', () => {
            document.body.classList.toggle('dark-theme');
            if (document.body.classList.contains('dark-theme')) {
                themeIcon.classList.replace('bi-moon', 'bi-sun');
            } else {
                themeIcon.classList.replace('bi-sun', 'bi-moon');
            }
        });

        // Initialize the application
        renderGraphs();
    </script>